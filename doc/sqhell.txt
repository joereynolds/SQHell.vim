*sqhell.txt*    For Vim version ?.?     Last Change 2017 December 10
*sqhell*

SQHell - An SQL wrapper for vim

===============================================================================
1. Global Options                                                *sqhell-options*

Note It is strongly recommended that you keep your configuration in a separate
file outside of version control.

Once the plugin is installed, you will need to add a dictionary that can be
loaded called `g:sqh_connections`. See more at the |sqhell-connections| section.

An example is given below containing multiple hosts

    let g:sqh_connections = {
        \ 'default': {
        \   'user': 'root',
        \   'password': 'testing345',
        \   'host': 'localhost'
        \},
        \ 'live': {
        \   'user': 'root',
        \   'password': 'gdfgee6Â£"^f',
        \   'host': '45.211.32.521'
        \}
    \}

By default, SQHell uses the 'default' key connection details.
In order to connect, each entry needs a 'user', 'password', and 'host' key.

g:sqh_connection                                              *sqhell-connection*

The host to connect to, the default is 'default'.

g:sqh_results_limit                                        *sqhell-results-limit*

How many entries to limit by when we view a tables results.
Default is 100

i.e. `let g:sqh_results_limit = 1000`

g:sqh_provider                                                  *sqhell-provider*

The database provider to use, by default it is MySQL.
The name of the provider should match the name under
the `autoload` directory.

i.e. `let g:sqh_provider = 'psql'`


===============================================================================
2. Connections and their settings                            *sqhell-connections*

Connections details can vary depending on the database system you use.
Because of this, here are some examples to get you started

MYSQL                                                  *sqhell-connections-mysql*

MySQL requires a user, password, and host.

let g:sqh_connections = {
    \ 'default': {
    \   'user': 'root',
    \   'password': 'superman',
    \   'host': '46.105.58.32'
    \},
\}

POSTGRES                                            *sqhell-connections-postgres*

Postgres requires a user, password, host, and database.

let g:sqh_connections = {
    \ 'default': {
    \   'user': 'root',
    \   'password': 'hunter2',
    \   'host': '45.104.23.67',
    \   'database': 'postgres'
    \},
\}

SQLITE                                                *sqhell-connections-sqlite*

Sqlite requires a local database file (simples!).
Note that the database must have the absolute path to its location.

let g:sqh_connections = {
    \ 'default': {
    \   'database': '/home/joe/chinook.db'
    \}
\}

===============================================================================
3. Commands                                                     *sqhell-commands*

SQHShowDatabases                                          *sqhell-show-databases*

    Arguments: none
    Example: SQHShowDatabases

    Shows all databases

SQHShowTablesForDatabase                        *sqhell-show-tables-for-database*

    Arguments: table name
    Example: SQHShowTablesForDatabase Users

    Shows all tables for a given database.
    Note This creates a buffer with a filetype of SQHTable.
    See |sqhell-filetypes|

SQHDropDatabase                                            *sqhell-drop-database*

    Arguments: database name
    Example: SQHDropDatabase Users

    Drops the given database.

SQHDropTableFromDatabase                        *sqhell-drop-table-form-database*

    Arguments: database name, table name
    Example: SQHDropTableFromDatabase Users Profiles

    Drops the given table from the database.

SQHExecuteFile                                              *sqhell-execute-file*

    Arguments: filename(optional)
    Example: SQHExecuteFile /tmp/delete-everything.sql
    Example: SQHExecuteFile

    Executes a given file as SQL.
    If a filename is given it executes that file, otherwise defaults to the
    buffer you are in ('%')

SQHExecute                                                       *sqhell-execute*

    Arguments: none
    Example: SQHExecute

    Executes the line under the cursor.
    If there is a visual selection, it will execute the selection instead.

SQHExecute!                                              *sqhell-execute-command*

    Arguments: command
    Example: SQHExecute! SELECT * FROM users LIMIT 5

    Executes a given command as an SQL statement.
    It is case insensitive and you shouldn't quote the query.

SQHSwitchConnection                                    *sqhell-switch-connection*

    Arguments: connection name
    Example: SQHSwitchConnection live

    Switches the connection details to the given host specified
    in g:sqh_connections

SQHSortResults                                                *sqh-sort-results*

    Arguments: arguments for unix sort command
    Example: SQHSortResults -rn

    Sorts results by the column the cursor is currently located on.


===============================================================================
4. Filetypes                                                   *sqhell-filetypes*

SQHell comes with a few different filetypes for results to aid in
context aware operations.

Where possible the mappings available try to stick to Vim's semantics.

SQHTable                                                        *sqhell-sqhtable*
    The SQHTable view lists all tables for a given database.

    `e` - Edit the table.
        It will SELECT `g:sqh_results_limit` results from the table and display
        them to you.

        Note this opens a buffer with a filetype of SQHResult where more
        mappings will be (not currently) available.

    `dd` - Drop the table.

        Note this reloads the current SQHTable buffer

    `K` - Describe the table. An easy way to remember this mapping is that
        K shows man pages and help pages with other vim files, this is
        semantically similar.

SQHDatabase                                                  *sqhell-sqhdatabase*

    `e` - Show the tables belonging to this database.

        Note this opens a buffer with a filetype of SQHTable

    `dd` - Drop the database.

        Note this reloads the current SQHDatabase buffer

SQHResult                                                      *sqhell-sqhresult*

    `dd` - Delete the selected row.

        Note this reloads the current SQHResult buffer

    `s` - Sort results by the column the cursor is on
        Equivalent to `:SQHSortResults -f`

    `S` - Sort results by the column the cursor is on (in reverse)
        Equivalent to `:SQHSortResults -fr`

    `e` - Edit current table row. Closes current buffer (SQHResult)
          and opens a new SQHInsert buffer in current window.

    `i` - Insert a new row into the table. Closes current buffer
          and opens a new SQHInsert buffer in current window.


SQHInsert                                                      *sqhell-sqhinsert*

    `ZZ` - Close and save the row to the database.

===============================================================================
5. Statusline                                                 *sqhell-statusline*

SQHell exposes 1 variable for you to see the current host you're connecting
to.

    `sqhell#Host()` - Returns the current host you're connected to.

An example statusline configuration

    `set statusline=%{fugitive#statusline()}%y%m%=%f[%02p%%][%{sqhell#Host()}]`


vim:tw=78:ts=8:ft=help:norl:
